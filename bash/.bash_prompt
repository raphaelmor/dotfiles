prompt_git() {

    local default='\e[0m'

    local black='\e[30m'
    local red='\e[31m'
    local green='\e[32m'
    local yellow='\e[33m'
    local blue='\e[34m'
    local magenta='\e[35m'
    local cyan='\e[36m'
    local light_grey='\e[37m'

    local s=""
    local branchName=""

    # check if the current directory is in a git repository
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; printf "%s" $?) == 0 ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then

            # ensure index is up to date
            git update-index --really-refresh  -q &>/dev/null

            # check for uncommitted changes in the index
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s="$s+";
            fi

            # check for unstaged changes
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s="$s!";
            fi

            # check for untracked files
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s="$s?";
            fi

            # check for stashed files
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s="$s$";
            fi

        fi

        # get the short symbolic ref
        # if HEAD isn't a symbolic ref, get the short SHA
        # otherwise, just give up
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
                      git rev-parse --short HEAD 2> /dev/null || \
                      printf "(unknown)")"

        [ -n "$s" ] && s=" [$s]"

        printf "%s" "$1$branchName$s"
    else
        return
    fi
}

set_prompts() {
	local default='\e[0m'

	local black='\e[30m'
	local red='\e[31m'
	local green='\e[32m'
	local yellow='\e[33m'
	local blue='\e[34m'
	local magenta='\e[35m'
	local cyan='\e[36m'
	local light_grey='\e[37m'

	local hostStyle=""
	local userStyle=""

	if [[ "$USER" == "root" ]]; then
        userStyle="${red}"
    else
        userStyle="${green}"
    fi

    # connected via ssh
    if [[ "$SSH_TTY" ]]; then
        hostStyle="${red}"
    else
        hostStyle="${yellow}"
    fi
	
	PS1="\[\033]0;\w\007\]"
    PS1+="\n"
	PS1+="\[${userStyle}\]\u"
	PS1+="\[${default}\]@"
	PS1+="\[${hostStyle}\]\h"
	PS1+="\[${default}\]: "
	PS1+="\[${blue}\]\w"
	PS1+="\$(prompt_git \"${default} on ${green}\")"
	PS1+="\n"
	PS1+="\[${default}\]\$ "

    PS2="\[${yellow}\]â†’ \[${default}\]";

 	export PS1
    export PS2

}

set_prompts
unset set_prompts




